/*
PostgreSQL Backup
Database: testovoe/public
Backup Time: 2022-08-14 17:08:50
*/

DROP SEQUENCE IF EXISTS "public"."AspNetRoleClaims_Id_seq";
DROP SEQUENCE IF EXISTS "public"."AspNetUserClaims_Id_seq";
DROP SEQUENCE IF EXISTS "public"."Films_Id_seq";
DROP TABLE IF EXISTS "public"."AspNetRoleClaims";
DROP TABLE IF EXISTS "public"."AspNetRoles";
DROP TABLE IF EXISTS "public"."AspNetUserClaims";
DROP TABLE IF EXISTS "public"."AspNetUserLogins";
DROP TABLE IF EXISTS "public"."AspNetUserRoles";
DROP TABLE IF EXISTS "public"."AspNetUserTokens";
DROP TABLE IF EXISTS "public"."AspNetUsers";
DROP TABLE IF EXISTS "public"."Films";
DROP TABLE IF EXISTS "public"."__EFMigrationsHistory";
CREATE SEQUENCE "AspNetRoleClaims_Id_seq" 
INCREMENT 1
MINVALUE  1
MAXVALUE 2147483647
START 1
CACHE 1;
CREATE SEQUENCE "AspNetUserClaims_Id_seq" 
INCREMENT 1
MINVALUE  1
MAXVALUE 2147483647
START 1
CACHE 1;
CREATE SEQUENCE "Films_Id_seq" 
INCREMENT 1
MINVALUE  1
MAXVALUE 2147483647
START 1
CACHE 1;
CREATE TABLE "AspNetRoleClaims" (
  "Id" int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY (
INCREMENT 1
MINVALUE  1
MAXVALUE 2147483647
START 1
CACHE 1
),
  "RoleId" text COLLATE "pg_catalog"."default" NOT NULL,
  "ClaimType" text COLLATE "pg_catalog"."default",
  "ClaimValue" text COLLATE "pg_catalog"."default"
)
;
ALTER TABLE "AspNetRoleClaims" OWNER TO "postgres";
CREATE TABLE "AspNetRoles" (
  "Id" text COLLATE "pg_catalog"."default" NOT NULL,
  "Name" varchar(256) COLLATE "pg_catalog"."default",
  "NormalizedName" varchar(256) COLLATE "pg_catalog"."default",
  "ConcurrencyStamp" text COLLATE "pg_catalog"."default"
)
;
ALTER TABLE "AspNetRoles" OWNER TO "postgres";
CREATE TABLE "AspNetUserClaims" (
  "Id" int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY (
INCREMENT 1
MINVALUE  1
MAXVALUE 2147483647
START 1
CACHE 1
),
  "UserId" text COLLATE "pg_catalog"."default" NOT NULL,
  "ClaimType" text COLLATE "pg_catalog"."default",
  "ClaimValue" text COLLATE "pg_catalog"."default"
)
;
ALTER TABLE "AspNetUserClaims" OWNER TO "postgres";
CREATE TABLE "AspNetUserLogins" (
  "LoginProvider" text COLLATE "pg_catalog"."default" NOT NULL,
  "ProviderKey" text COLLATE "pg_catalog"."default" NOT NULL,
  "ProviderDisplayName" text COLLATE "pg_catalog"."default",
  "UserId" text COLLATE "pg_catalog"."default" NOT NULL
)
;
ALTER TABLE "AspNetUserLogins" OWNER TO "postgres";
CREATE TABLE "AspNetUserRoles" (
  "UserId" text COLLATE "pg_catalog"."default" NOT NULL,
  "RoleId" text COLLATE "pg_catalog"."default" NOT NULL
)
;
ALTER TABLE "AspNetUserRoles" OWNER TO "postgres";
CREATE TABLE "AspNetUserTokens" (
  "UserId" text COLLATE "pg_catalog"."default" NOT NULL,
  "LoginProvider" text COLLATE "pg_catalog"."default" NOT NULL,
  "Name" text COLLATE "pg_catalog"."default" NOT NULL,
  "Value" text COLLATE "pg_catalog"."default"
)
;
ALTER TABLE "AspNetUserTokens" OWNER TO "postgres";
CREATE TABLE "AspNetUsers" (
  "Id" text COLLATE "pg_catalog"."default" NOT NULL,
  "Name" text COLLATE "pg_catalog"."default" NOT NULL,
  "Surname" text COLLATE "pg_catalog"."default" NOT NULL,
  "UserName" varchar(256) COLLATE "pg_catalog"."default",
  "NormalizedUserName" varchar(256) COLLATE "pg_catalog"."default",
  "Email" varchar(256) COLLATE "pg_catalog"."default",
  "NormalizedEmail" varchar(256) COLLATE "pg_catalog"."default",
  "EmailConfirmed" bool NOT NULL,
  "PasswordHash" text COLLATE "pg_catalog"."default",
  "SecurityStamp" text COLLATE "pg_catalog"."default",
  "ConcurrencyStamp" text COLLATE "pg_catalog"."default",
  "PhoneNumber" text COLLATE "pg_catalog"."default",
  "PhoneNumberConfirmed" bool NOT NULL,
  "TwoFactorEnabled" bool NOT NULL,
  "LockoutEnd" timestamptz(6),
  "LockoutEnabled" bool NOT NULL,
  "AccessFailedCount" int4 NOT NULL
)
;
ALTER TABLE "AspNetUsers" OWNER TO "postgres";
CREATE TABLE "Films" (
  "Id" int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY (
INCREMENT 1
MINVALUE  1
MAXVALUE 2147483647
START 1
CACHE 1
),
  "Name" text COLLATE "pg_catalog"."default" NOT NULL,
  "Description" text COLLATE "pg_catalog"."default",
  "YearRelease" text COLLATE "pg_catalog"."default",
  "Producer" text COLLATE "pg_catalog"."default",
  "PosterName" text COLLATE "pg_catalog"."default",
  "UserId" text COLLATE "pg_catalog"."default"
)
;
ALTER TABLE "Films" OWNER TO "postgres";
CREATE TABLE "__EFMigrationsHistory" (
  "MigrationId" varchar(150) COLLATE "pg_catalog"."default" NOT NULL,
  "ProductVersion" varchar(32) COLLATE "pg_catalog"."default" NOT NULL
)
;
ALTER TABLE "__EFMigrationsHistory" OWNER TO "postgres";
BEGIN;
LOCK TABLE "public"."AspNetRoleClaims" IN SHARE MODE;
DELETE FROM "public"."AspNetRoleClaims";
COMMIT;
BEGIN;
LOCK TABLE "public"."AspNetRoles" IN SHARE MODE;
DELETE FROM "public"."AspNetRoles";
COMMIT;
BEGIN;
LOCK TABLE "public"."AspNetUserClaims" IN SHARE MODE;
DELETE FROM "public"."AspNetUserClaims";
COMMIT;
BEGIN;
LOCK TABLE "public"."AspNetUserLogins" IN SHARE MODE;
DELETE FROM "public"."AspNetUserLogins";
COMMIT;
BEGIN;
LOCK TABLE "public"."AspNetUserRoles" IN SHARE MODE;
DELETE FROM "public"."AspNetUserRoles";
COMMIT;
BEGIN;
LOCK TABLE "public"."AspNetUserTokens" IN SHARE MODE;
DELETE FROM "public"."AspNetUserTokens";
COMMIT;
BEGIN;
LOCK TABLE "public"."AspNetUsers" IN SHARE MODE;
DELETE FROM "public"."AspNetUsers";
INSERT INTO "public"."AspNetUsers" ("Id","Name","Surname","UserName","NormalizedUserName","Email","NormalizedEmail","EmailConfirmed","PasswordHash","SecurityStamp","ConcurrencyStamp","PhoneNumber","PhoneNumberConfirmed","TwoFactorEnabled","LockoutEnd","LockoutEnabled","AccessFailedCount") VALUES ('cfefc92f-e102-4a1e-8cdb-79d8201cb16f', 'Даниил', 'Жиров', 'zhirowdaniil@gmail.com', 'ZHIROWDANIIL@GMAIL.COM', 'zhirowdaniil@gmail.com', 'ZHIROWDANIIL@GMAIL.COM', 'f', 'AQAAAAEAACcQAAAAEJvzAf879HiexUGpReQL9gMy21NE7Dx/DXuRfFX74x2f3j2X5btM7qiv3esiZIkbbw==', 'OZ2NLIH5T5XTCBODKCW3CTNLA7M57OOQ', '2ff10b33-2c43-4094-b4b1-69db8c498b25', NULL, 'f', 'f', NULL, 't', 0),('90a3c520-161e-4292-b0d9-ec8f588ceed2', 'Даниил', 'Жиров', 'nowgun98@gmail.com', 'NOWGUN98@GMAIL.COM', 'nowgun98@gmail.com', 'NOWGUN98@GMAIL.COM', 'f', 'AQAAAAEAACcQAAAAEJE1SBubvtigwLNYNlDxYqFhk7jKbJSkJbaVtbrhhq3Qwi8uW8JKbOLHyriqTApayQ==', 'H4IE4DYFLDMSV3AUMPILUKLJZRYVRL52', 'f8080dc7-223d-4d31-a30c-6028f61eb716', NULL, 'f', 'f', NULL, 't', 0);
COMMIT;
BEGIN;
LOCK TABLE "public"."Films" IN SHARE MODE;
DELETE FROM "public"."Films";
INSERT INTO "public"."Films" ("Id","Name","Description","YearRelease","Producer","PosterName","UserId") VALUES (41, 'Хатико: Самый верный друг', 'Однажды, в очередной раз отправившись на вокзал, чтобы доехать на работу, университетский профессор Паркер Уилсон находит там маленького щенка. Он принимает решение оставить собаку у себя и называет Хатико, и в скором времени между хозяином и питомцем зарождается очень крепкая дружба. Каждый день животное провожает и встречает с работы своего хозяина. Но однажды, во время очередной лекции у профессора случается сердечный приступ, и Хатико так и не дожидается любимого хозяина. До конца своей недолгой собачей жизни верный пес каждый день приходит на вокзал с надеждой, что вот-вот его хозяин вернется.', NULL, 'Лассе Халльстрём', '90a3c520-161e-4292-b0d9-ec8f588ceed2_g1713ca72b5c2pv80f52q.jpg', '90a3c520-161e-4292-b0d9-ec8f588ceed2'),(25, 'Побег из Шоушенка', 'В основу культовой драмы легла повесть Стивена Кинга «Рита Хейуорт из Шоушенка». Действие фильма разворачивается в конце 50-х годов прошлого столетия. Молодого финансиста Энди Дюфрейна за двойное убийство приговаривают к пожизненному заключению, но он категорически отрицает свою причастность к преступлению. Свой срок Энди отправляется отбывать в одну из известнейших тюрем – Шоушенк, из которой еще никому не удавалось сбежать. В тюрьме парень сталкивается с суровыми реалиями тюремного мира, мира, где нет места состраданию, а вокруг только жестокость. Энди неоднократно становится жертвой сексуальных домогательств, но он сопротивляется до последнего. В скором времени тюремная жизнь Дюфрейна немного налаживается, и он даже находит себе друга, которым становится чернокожий заключенный Рэд...', '1994-09-10', 'Фрэнк Дарабонт', '90a3c520-161e-4292-b0d9-ec8f588ceed2_o41759bd352dazn54q16d.jpeg', '90a3c520-161e-4292-b0d9-ec8f588ceed2'),(26, 'Зеленая миля', 'Картина снята по одноименному роману Стивена Кинга. Однажды в блок для приговоренных к смертной казни поступает новый заключенный – Джон Коффи, осужденный за убийство маленьких девочек. Коффи привлекает внимание начальника этого блока – Пола Эджкомба. За долгие годы работы он насмотрелся на разных преступников, и он немного разбирается в людях. Пол сомневается в виновности Коффи, ведь несмотря на его устрашающий вид, он обладает добротой и человечностью. Так же со временем выясняется, что Джон является обладателем удивительного дара – способностью исцелять. Пол понимает, что такой человек никак не может быть убийцей. Но что же делать, и как помочь ему?', NULL, 'Фрэнк Дарабонт', '90a3c520-161e-4292-b0d9-ec8f588ceed2_w9648805312b9ri89j82f.jpg', '90a3c520-161e-4292-b0d9-ec8f588ceed2'),(27, 'Форрест Гамп', NULL, NULL, 'Роберт Земекис', '90a3c520-161e-4292-b0d9-ec8f588ceed2_f8cfabd5b4fb8lh96z58u.jpg', '90a3c520-161e-4292-b0d9-ec8f588ceed2'),(28, 'Леон', 'Леон ведет тихий и спокойный образ жизни в одном из не самых лучших районов Нью-Йорка под названием Маленькая Италия. Никто даже представить себе не может, что этот человек самый настоящий наемный убийца. Однажды, находясь дома, Леон слышит шум, и, посмотрев в глазок своей двери, он становится свидетелем того, как всю семью, живущую в соседней квартире, убивают. Выжить удается только девочке-подростку Матильде, которой в то время не было дома. Она обращается к своему соседу Леону за помощью, ведь ей больше некуда идти. Хладнокровный убийца вдруг начинает испытывать чуждые ранее ему чувства, и пускает девочку к себе. Они начинают жить вместе, и узнав чем ее спаситель зарабатывает на жизнь, Матильда просит научить ее убивать, чтобы она могла отомстить убийцам своей семьи. Но вряд ли это приведет к чему-нибудь хорошему…', NULL, NULL, '90a3c520-161e-4292-b0d9-ec8f588ceed2_x22fbdcdf6d34zp97c34z.jpg', '90a3c520-161e-4292-b0d9-ec8f588ceed2'),(29, 'Начало', NULL, '2010-07-08', 'Кристофер Нолан', '90a3c520-161e-4292-b0d9-ec8f588ceed2_j9a49d3b3b38dmw11n94d.jpeg', '90a3c520-161e-4292-b0d9-ec8f588ceed2'),(30, 'Властелин колец: Возвращение Короля', 'Приключенческий фильм «Властелин колец: Возвращение Короля» - это заключительная часть трилогии, снятой новозеландским режиссером Питером Джексоном по роману известного английского писателя Дж. Р. Р. Толкина «Властелин колец».Отважные хоббиты Фродо и Сэм, благодаря невероятной выдержке и выносливости, почти достигли своей цели. В это самое время темный владыка Саурон направляет несметные полчища орков к стенам города королей – Минас-Тирита. В результате грандиозного сражения силам добра снова удается одержать победу в битве. Однако исход всей войны зависит именно от тех самых двух хоббитов, ведь если они не смогут уничтожить кольцо, то все жертвы будут напрасны.', NULL, 'Питер Джексон', '90a3c520-161e-4292-b0d9-ec8f588ceed2_s86fe6bfd05b5zc23z69w.jpg', '90a3c520-161e-4292-b0d9-ec8f588ceed2'),(42, 'Терминатор 2: Судный день', NULL, NULL, NULL, '90a3c520-161e-4292-b0d9-ec8f588ceed2_d001815dd117bte78r53h.jpeg', '90a3c520-161e-4292-b0d9-ec8f588ceed2'),(31, 'Бойцовский клуб', 'В основу сюжета картины лег одноименный роман Чака Паланика. Главный герой фильма работает рядовым клерком в одной из крупных корпораций, и ведет очень скучный образ жизни. Единственным развлечением для него является покупка мебели по каталогам. Но однажды все кардинальным образом меняется, после того как герой знакомится с Тайлером Дерденом, человеком очень отличающимся от него, отрицающим устоявшиеся стереотипы. Они начинают общаться, и в скором времени герой принимает философию жизни Тайлера. Однажды парни находят новый способ получать удовольствие, и начинают жестоко драться, независимо от того, где они находятся. Спустя время они организовывают тайный Бойцовский Клуб, где все желающие в драке могут выпустить пар...', '1999-09-10', 'Дэвид Финчер', '90a3c520-161e-4292-b0d9-ec8f588ceed2_m33c30ddfb881gn13z89a.jpg', '90a3c520-161e-4292-b0d9-ec8f588ceed2'),(32, 'Назад в будущее', NULL, NULL, NULL, '90a3c520-161e-4292-b0d9-ec8f588ceed2_w399fb56a333fke75x37l.jpeg', '90a3c520-161e-4292-b0d9-ec8f588ceed2'),(33, 'Интерстеллар', 'В будущем климатические изменения привели к катастрофическому снижению урожайности и вымиранию самых распространенных сельскохозяйственных культур. Население страдает от голода и болезней на покрытой песком Земле, а бывший пилот Купер, как и большинство американцев, вынужден был бросить карьеру, чтобы заняться фермерством. Однажды его дочь Мёрфи пугается призрака в собственной спальне, оставившего ей закодированное сообщение. Сначала отец не верит девочке, но вскоре вместе они расшифровывают код и, следуя подсказкам, находят секретную базу НАСА, где ученные занимаются созданием уникального космического корабля, способного пролететь через черную дыру и достичь пригодной для обитания планеты, способной стать новым домом для всего человечества...', '2014-10-26', 'Кристофер Нолан', '90a3c520-161e-4292-b0d9-ec8f588ceed2_y67dc4249be8bzw87v42u.jpg', '90a3c520-161e-4292-b0d9-ec8f588ceed2'),(34, 'Поймай меня, если сможешь', 'Криминальная драма рассказывает о реальных событиях из жизни Фрэнка Эбигнейла – одного из самых легендарных мошенников. По сюжету фильма Фрэнк Эбигнейл - молодой гениальный мошенник, один из лучших в своем деле. Он невероятно умен, и способен провернуть, что только его душе угодно. Сегодня он врач, завтра пилот – Фрэнк очень легко обманывает людей, и способен убедить любого, что он именно тот, за кого себя выдает. Однако выходки Эбигнейла не могли быть не замечены, и в скором времени на его след выходит ФБР в лице агента Карла Хэнрэтти – очень умного и целеустремленного человека. Правда, каждый раз, когда Карл вот-вот должен был схватить преступника, Фрэнк всегда его немного опережает, и все начинается сначала...', NULL, NULL, '90a3c520-161e-4292-b0d9-ec8f588ceed2_q369cc6ce3cbctx16z57r.jpeg', '90a3c520-161e-4292-b0d9-ec8f588ceed2'),(35, '12 разгневанных мужчин', NULL, NULL, NULL, '90a3c520-161e-4292-b0d9-ec8f588ceed2_zaaa6ea1433dcwq41n31d.jpg', '90a3c520-161e-4292-b0d9-ec8f588ceed2'),(36, 'Джентльмены', 'Микки Пирсон родился и вырос в США в бедной семье, однако смог получить стипендию Родса и поступить в Оксфордский университет, где начал продавать марихуану своим сокурсникам. В скором времени учеба отошла на второй план, а Микки сосредоточился на развитии подпольного бизнеса по выращиванию и продаже травки, достигнув в итоге невероятных успехов. Став одной из самых влиятельных фигур Великобритании, он через некоторое время решает продать прибыльный бизнес, оценив его в 400 миллионов фунтов, но неожиданно сталкивается с серьезными проблемами...', '2019-12-03', NULL, '90a3c520-161e-4292-b0d9-ec8f588ceed2_e79fff566395bjs88z47z.jpg', '90a3c520-161e-4292-b0d9-ec8f588ceed2'),(37, 'Темный рыцарь', NULL, NULL, NULL, '90a3c520-161e-4292-b0d9-ec8f588ceed2_qbcd3c26d5b8efr73m34a.jpg', '90a3c520-161e-4292-b0d9-ec8f588ceed2'),(38, 'Матрица', NULL, NULL, NULL, '90a3c520-161e-4292-b0d9-ec8f588ceed2_h4442e483f19aey57g75d.jpg', '90a3c520-161e-4292-b0d9-ec8f588ceed2'),(39, 'Остров проклятых', NULL, NULL, NULL, '90a3c520-161e-4292-b0d9-ec8f588ceed2_ga421fd7837ffyx31y64f.jpeg', '90a3c520-161e-4292-b0d9-ec8f588ceed2'),(40, 'Отступники', 'В центре сюжета картины двое полицейских, один из которых Колин Салливан работает на мафию, а второй Билли Костиган был внедрен в ряды мафиозной группировки, чтобы выявить крота.Когда-то давно они оба окончили полицейскую академию, и были лучшими выпускниками, однако судьба злодейка распорядилась так, что теперь парни по разные стороны баррикад. Билли пришлось отсидеть реальный срок, чтобы внедриться в мафию, и теперь он делает все, чтобы выявить стукача, но пока тщетно. В это время официальное дело по поиску крота ведет именно Салливан, которому нужно отвести от себя все подозрения...В центре сюжета картины двое полицейских, один из которых Колин Салливан работает на мафию, а второй Билли Костиган был внедрен в ряды мафиозной группировки, чтобы выявить крота.Когда-то давно они оба окончили полицейскую академию, и были лучшими выпускниками, однако судьба злодейка распорядилась так, что теперь парни по разные стороны баррикад. Билли пришлось отсидеть реальный срок, чтобы внедриться в мафию, и теперь он делает все, чтобы выявить стукача, но пока тщетно. В это время официальное дело по поиску крота ведет именно Салливан, которому нужно отвести от себя все подозрения...', NULL, NULL, '90a3c520-161e-4292-b0d9-ec8f588ceed2_nfc09e70e56a2qz79a35p.jpg', '90a3c520-161e-4292-b0d9-ec8f588ceed2'),(43, 'Храброе сердце', 'Действия картины разворачиваются во времена борьбы Шотландии за свою независимость против Англии. Долгое время шотландская земля подвергалась жестоким набегам со стороны военных отрядов. Солдаты короля Эдуарда Длинноногого разоряли деревни, мужчин убивали, а женщин насиловали. Во время одного из таких набегов были убиты отец и брат главного героя – Уильяма Уоллеса, после чего воспитанием мальчика занимался дядя. Став взрослым, он возвращается в родную деревню, где женится на девушке Маррон, с которой они были знакомы еще с детства. Венчание проходит тайно, по причине введенного королем унизительного закона о первой ночи. В скором времени в деревню приходят англичане, и убивают возлюбленную Уоллеса. Уильям поднимает восстание, и к нему примыкает все больше и больше сподвижников. Через какое-то время под предводительством Уоллеса была настоящая армия...', NULL, NULL, '90a3c520-161e-4292-b0d9-ec8f588ceed2_f722f2bd3d742kj43u66v.jpg', '90a3c520-161e-4292-b0d9-ec8f588ceed2'),(44, 'Назад в будущее 2', 'Фантастическая картина «Назад в будущее 2» продолжает рассказывать о невероятных приключениях парня Марти Макфлая и его странноватого, но гениального друга - доктора Эммета Брауна.Как обычно это бывает, док появляется в самый неподходящий момент. Только Марти отошёл от недавних приключений, и собрался вместе со своей девушкой Дженнифер провести выходные за городом, как появляется доктор Браун на машине времени. Марти впадает в ступор, когда видит, как тот одет. Однако все становиться на свои места, после того, как док объясняет цель своего визита. Он сообщает парочке, что им предстоит отправиться в далекое будущее, а именно в 2015 год, чтобы помочь своим детям. Впереди их ждут невероятные и незабываемые приключения...', NULL, 'Роберт Земекис', '90a3c520-161e-4292-b0d9-ec8f588ceed2_c0f7fd083ad83xd38e33w.jpg', '90a3c520-161e-4292-b0d9-ec8f588ceed2'),(46, 'Брат', 'Действия криминального боевика разворачиваются в лихие 90-е. Главный герой, Данила Багров, только что дембельнулся, и возвращается домой. Наслушавшись упреков от родной матери и поняв, что в родном городе найти хорошую работу перспективы нет и не будет, он отправляется к своему старшему брату Виктору в Петербург, который, по словам матери, успешный человек.Данила долго не может отыскать брата в огромном городе, а когда находит, оказывается, что тот – самый настоящий киллер, известный в преступном мире под прозвищем Татарин. Вскоре у Виктора начинаются большие проблемы, и он просит брата выполнить одно из его заказов. Так Данила оказывается втянут в криминал, и впереди его ждут очень опасные приключения.', '1997-05-17', 'Алексей Балабанов', '90a3c520-161e-4292-b0d9-ec8f588ceed2_x027f1b52fcd4ts96f15p.jpg', '90a3c520-161e-4292-b0d9-ec8f588ceed2'),(45, 'Семь', NULL, NULL, NULL, '90a3c520-161e-4292-b0d9-ec8f588ceed2_p2ec58386e104dd94k29h.jpg', '90a3c520-161e-4292-b0d9-ec8f588ceed2');
COMMIT;
BEGIN;
LOCK TABLE "public"."__EFMigrationsHistory" IN SHARE MODE;
DELETE FROM "public"."__EFMigrationsHistory";
INSERT INTO "public"."__EFMigrationsHistory" ("MigrationId","ProductVersion") VALUES ('20220811152456_Initial', '6.0.8');
COMMIT;
ALTER TABLE "AspNetRoleClaims" ADD CONSTRAINT "PK_AspNetRoleClaims" PRIMARY KEY ("Id");
CREATE INDEX "IX_AspNetRoleClaims_RoleId" ON "AspNetRoleClaims" USING btree (
  "RoleId" COLLATE "pg_catalog"."default" "pg_catalog"."text_ops" ASC NULLS LAST
);
ALTER TABLE "AspNetRoles" ADD CONSTRAINT "PK_AspNetRoles" PRIMARY KEY ("Id");
CREATE UNIQUE INDEX "RoleNameIndex" ON "AspNetRoles" USING btree (
  "NormalizedName" COLLATE "pg_catalog"."default" "pg_catalog"."text_ops" ASC NULLS LAST
);
ALTER TABLE "AspNetUserClaims" ADD CONSTRAINT "PK_AspNetUserClaims" PRIMARY KEY ("Id");
CREATE INDEX "IX_AspNetUserClaims_UserId" ON "AspNetUserClaims" USING btree (
  "UserId" COLLATE "pg_catalog"."default" "pg_catalog"."text_ops" ASC NULLS LAST
);
ALTER TABLE "AspNetUserLogins" ADD CONSTRAINT "PK_AspNetUserLogins" PRIMARY KEY ("LoginProvider", "ProviderKey");
CREATE INDEX "IX_AspNetUserLogins_UserId" ON "AspNetUserLogins" USING btree (
  "UserId" COLLATE "pg_catalog"."default" "pg_catalog"."text_ops" ASC NULLS LAST
);
ALTER TABLE "AspNetUserRoles" ADD CONSTRAINT "PK_AspNetUserRoles" PRIMARY KEY ("UserId", "RoleId");
CREATE INDEX "IX_AspNetUserRoles_RoleId" ON "AspNetUserRoles" USING btree (
  "RoleId" COLLATE "pg_catalog"."default" "pg_catalog"."text_ops" ASC NULLS LAST
);
ALTER TABLE "AspNetUserTokens" ADD CONSTRAINT "PK_AspNetUserTokens" PRIMARY KEY ("UserId", "LoginProvider", "Name");
ALTER TABLE "AspNetUsers" ADD CONSTRAINT "PK_AspNetUsers" PRIMARY KEY ("Id");
CREATE INDEX "EmailIndex" ON "AspNetUsers" USING btree (
  "NormalizedEmail" COLLATE "pg_catalog"."default" "pg_catalog"."text_ops" ASC NULLS LAST
);
CREATE UNIQUE INDEX "UserNameIndex" ON "AspNetUsers" USING btree (
  "NormalizedUserName" COLLATE "pg_catalog"."default" "pg_catalog"."text_ops" ASC NULLS LAST
);
ALTER TABLE "Films" ADD CONSTRAINT "PK_Films" PRIMARY KEY ("Id");
CREATE INDEX "IX_Films_UserId" ON "Films" USING btree (
  "UserId" COLLATE "pg_catalog"."default" "pg_catalog"."text_ops" ASC NULLS LAST
);
ALTER TABLE "__EFMigrationsHistory" ADD CONSTRAINT "PK___EFMigrationsHistory" PRIMARY KEY ("MigrationId");
ALTER TABLE "AspNetRoleClaims" ADD CONSTRAINT "FK_AspNetRoleClaims_AspNetRoles_RoleId" FOREIGN KEY ("RoleId") REFERENCES "public"."AspNetRoles" ("Id") ON DELETE CASCADE ON UPDATE NO ACTION;
ALTER TABLE "AspNetUserClaims" ADD CONSTRAINT "FK_AspNetUserClaims_AspNetUsers_UserId" FOREIGN KEY ("UserId") REFERENCES "public"."AspNetUsers" ("Id") ON DELETE CASCADE ON UPDATE NO ACTION;
ALTER TABLE "AspNetUserLogins" ADD CONSTRAINT "FK_AspNetUserLogins_AspNetUsers_UserId" FOREIGN KEY ("UserId") REFERENCES "public"."AspNetUsers" ("Id") ON DELETE CASCADE ON UPDATE NO ACTION;
ALTER TABLE "AspNetUserRoles" ADD CONSTRAINT "FK_AspNetUserRoles_AspNetRoles_RoleId" FOREIGN KEY ("RoleId") REFERENCES "public"."AspNetRoles" ("Id") ON DELETE CASCADE ON UPDATE NO ACTION;
ALTER TABLE "AspNetUserRoles" ADD CONSTRAINT "FK_AspNetUserRoles_AspNetUsers_UserId" FOREIGN KEY ("UserId") REFERENCES "public"."AspNetUsers" ("Id") ON DELETE CASCADE ON UPDATE NO ACTION;
ALTER TABLE "AspNetUserTokens" ADD CONSTRAINT "FK_AspNetUserTokens_AspNetUsers_UserId" FOREIGN KEY ("UserId") REFERENCES "public"."AspNetUsers" ("Id") ON DELETE CASCADE ON UPDATE NO ACTION;
ALTER TABLE "Films" ADD CONSTRAINT "FK_Films_AspNetUsers_UserId" FOREIGN KEY ("UserId") REFERENCES "public"."AspNetUsers" ("Id") ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER SEQUENCE "AspNetRoleClaims_Id_seq"
OWNED BY "AspNetRoleClaims"."Id";
SELECT setval('"AspNetRoleClaims_Id_seq"', 1, false);
ALTER SEQUENCE "AspNetRoleClaims_Id_seq" OWNER TO "postgres";
ALTER SEQUENCE "AspNetUserClaims_Id_seq"
OWNED BY "AspNetUserClaims"."Id";
SELECT setval('"AspNetUserClaims_Id_seq"', 1, false);
ALTER SEQUENCE "AspNetUserClaims_Id_seq" OWNER TO "postgres";
ALTER SEQUENCE "Films_Id_seq"
OWNED BY "Films"."Id";
SELECT setval('"Films_Id_seq"', 47, true);
ALTER SEQUENCE "Films_Id_seq" OWNER TO "postgres";
